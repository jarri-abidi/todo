// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: task.sql

package gen

import (
	"context"
	"database/sql"
)

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const findAllTasks = `-- name: FindAllTasks :many
SELECT id, name, done FROM tasks
ORDER BY name
`

func (q *Queries) FindAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, findAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(&i.ID, &i.Name, &i.Done); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTask = `-- name: FindTask :one
SELECT id, name, done FROM tasks
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, findTask, id)
	var i Task
	err := row.Scan(&i.ID, &i.Name, &i.Done)
	return i, err
}

const insertTask = `-- name: InsertTask :one
INSERT INTO tasks (name) 
VALUES ($1)
RETURNING id, name, done
`

func (q *Queries) InsertTask(ctx context.Context, name string) (Task, error) {
	row := q.db.QueryRowContext(ctx, insertTask, name)
	var i Task
	err := row.Scan(&i.ID, &i.Name, &i.Done)
	return i, err
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
  set name = $2,
  done = $3
WHERE id = $1
`

type UpdateTaskParams struct {
	ID   int64
	Name string
	Done sql.NullBool
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask, arg.ID, arg.Name, arg.Done)
	return err
}
